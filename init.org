# -*- eval: (add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t); -*-

#+TITLE: Emacs Literate Configuration
#+AUTHOR: Giles Paterson
#+PROPERTY: header-args :tangle yes

:PROPERTIES:
:VISIBILITY: children
:END:

* Table of Contexts :TOC_3_gh:
- [[#about-this-file][About this file]]
  - [[#tangle-on-save][Tangle on Save]]
  - [[#visibility-settings][Visibility Settings]]
  - [[#table-of-contents][Table of Contents]]
- [[#early-init][Early Init]]
  - [[#disable-the-tool-bar-and-menu-bar][Disable the tool-bar and menu-bar]]
- [[#general-emacs-settings][General Emacs Settings]]
  - [[#use-package][Use-Package]]
  - [[#diminish][Diminish]]
  - [[#todo-garbage-collection-again][TODO: Garbage Collection (again)]]
  - [[#personal-information][Personal Information]]
  - [[#fix-defaults][Fix defaults]]
  - [[#disable-use-of-the-customize-file][Disable use of the customize file]]
  - [[#disable-backup-files][Disable backup files]]
  - [[#utf-8-all-the-things][UTF-8 all the things!]]
  - [[#unbind-the-pesky-sleep-key][Unbind the pesky sleep key]]
  - [[#use-y-or-n-instead-of-yes-or-no][Use 'y' or 'n' instead of 'yes' or 'no']]
  - [[#a-function-to-set-the-framesize-for-streaming][A function to set the framesize for streaming]]
  - [[#enable-overwriting-selected-text][Enable overwriting selected text]]
  - [[#disable-audible-bell-use-visual-instead][Disable audible bell, use visual instead]]
  - [[#show-trailing-white-space][Show trailing white space]]
  - [[#highlight-current-line][Highlight current line]]
  - [[#undo-tree][Undo Tree]]
  - [[#theme][Theme]]
    - [[#mode-line][Mode line]]
  - [[#fonts][Fonts]]
  - [[#which-key][Which key]]
- [[#org-mode][Org Mode]]
  - [[#toc-org][Toc-org]]
  - [[#org-roam][Org Roam]]
- [[#markdown][Markdown]]
- [[#completion-framework][Completion Framework]]
  - [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#ivy-rich][Ivy-Rich]]
  - [[#swiper][Swiper]]
- [[#git-stuff][Git stuff]]
- [[#projectile][Projectile]]
  - [[#counsel-projectile-org-capture][counsel-projectile-org-capture]]
- [[#codetext-completion-company-mode][Code/Text Completion (company-mode)]]
- [[#parentheses][Parentheses]]
- [[#line-numbers][Line numbers]]
- [[#development-languages][Development languages]]
  - [[#treemacs][Treemacs]]
  - [[#javascriptweb-development-lsp][Javascript/web development (lsp?)]]
- [[#yaml][Yaml]]

* About this file
This configuration is inspired by [[https://github.com/vidjuheffex/dotemacs][vidjuheffex's config]] and [[https://github.com/gilbertw1/emacs-literate-starter][gilbertw1's config]]. I've also taken inspiration from https://blog.sumtypeofway.com/posts/emacs-config.html and https://assortedarray.com/posts/my-init-org-setup/.

This is a literate configuration, meaning that it's an org file with embedded code blocks that form the configuration for emacs. Having the code blocks in an org file allows me to document everything with the code it relates to.

** Tangle on Save
   Rather than using a stub init.el that calls =org-babel-load-file= on startup, I'm using a hook to tangle this file when I save. This means that I only have one configuration file, and hopefully startup will be quicker too.

   I'm using a file variable, added with =M-x add-file-local-variable-prop-line=, to set the eval hook in the first line of this file.

   #+begin_src emacs-lisp :tangle no
     eval: (add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t);
   #+end_src

   Alternatively, the file can be manually tangled with =M-x org-babel-tangle= or =C-c C-v t=.

** Visibility Settings
 Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility that tells org to show it's direct children on startup. This way a clean outline of all sub headings under Configuration is shown each time this file is opened in org-mode.

** Table of Contents
 Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_3_gh:=. This tells an org-mode package =toc-org= to generate a table of contents under this heading that has a max depth of 3 and is created using Github-style hrefs. This table of contents is updated everytime the file is saved and makes for a functional table of contents that works properly directly on github.

* Early Init
  Emacs 27 introduced the =early-init.el= file that is loaded very early in the startup process. It's intended for customizing how the package system is initialized, so let's do our package config there:

  #+begin_src emacs-lisp :tangle early-init.el
    ;;; early-init.el -*- lexical-binding: t; eval: (view-mode -1); -*-
    (require 'package)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  #+end_src

  Taking inspiration from [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][doom-emacs]], I'm going to bump the garbage collection threshold up during startup to help speed things up. Then we reset it after startup.
   #+begin_src emacs-lisp :tangle early-init.el
     (defvar gp/gc-cons-threshold 16777216) ;; 16mb
     (setq gc-cons-threshold most-positive-fixnum
	   gc-cons-percentage 0.6)
     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (setq gc-cons-threshold gp/gc-cons-threshold
		       gc-cons-percentage 0.1)))

   #+end_src

** Disable the tool-bar and menu-bar
 #+begin_src emacs-lisp :tangle early-init.el
   (tool-bar-mode -1)
   (menu-bar-mode -1)
 #+end_src

* General Emacs Settings
  Make elisp in this file have proper scoping. [[https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding][This Emacswiki article explains it well.]]

  I also enable =view-mode=, to make the tangled file read-only, as a reminder that it is auto-generated and shouldn't be manually edited.

#+begin_src emacs-lisp :comments no
;;; init.el -*- lexical-binding: t ; eval: (view-mode -1); -*-
#+end_src

** Use-Package
   I like to use [[https://github.com/jwiegley/use-package][use-package]] to keep things tidy and speedy on startup, so this makes sure it's available. I set it to defer loading packages unless told otherwise, this speeds up initialisation.

 #+begin_src emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (setq use-package-always-ensure t
	 use-package-ensure-all t
	 use-package-always-defer t)
   (require 'use-package)
   (require 'use-package-ensure)
 #+end_src

 I like to make sure all my packages are up to date, so I use auto-package-update.
 #+begin_src emacs-lisp
   (use-package auto-package-update
     :custom
     (auto-package-update-delete-old-versions t)
     :init
     (auto-package-update-maybe))
 #+end_src
** Diminish
Use diminish so that use-package can hide modes from the mode line when we ask it to.
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** TODO: Garbage Collection (again)
   Increase the garbage collection thresholds when using the minibuffer, and return to normal afterwards.

 #+begin_src emacs-lisp
   ;; ;; max memory available for gc when opening minibuffer
   ;; (defun gp/defer-garbage-collection-h ()
   ;;   (setq gc-cons-threshold most-positive-fixnum))

   ;; (defun gp/restore-garbage-collection-h ()
   ;;   ;; Defer it so that commands launched immediately after will enjoy the
   ;;   ;; benefits.
   ;;   (run-at-time
   ;;    1 nil (lambda () (setq gc-cons-threshold gp/gc-cons-threshold))))

   ;; (add-hook 'minibuffer-setup-hook #'gp/defer-garbage-collection-h)
   ;; (add-hook 'minibuffer-exit-hook #'gp/restore-garbage-collection-h)
 #+end_src
** Personal Information
    This is me
 #+begin_src emacs-lisp
 (setq user-full-name "Giles Paterson"
       user-mail-address "giles@vurt.uk")
 #+end_src


** Fix defaults
 Reset some emacs defaults that date from prehistoric times

 #+begin_src emacs-lisp
   (setq inhibit-startup-screen t)      ;; No need for a startup screen
   (setq initial-scratch-message nil)   ;; or to tell me what the scratch buffer is
   (setq inhibit-startup-echo-area-message t)
   (setq inhibit-startup-message t)
   (setq sentence-end-double-space nil) ;; Who the hell does this in 2021?
   (setq mark-even-if-inactive nil)     ;; Fix undo in command affecting the mark.
   (setq kill-whole-line t)             ;; Let C-k delete the whole line.
 #+end_src

** Disable use of the customize file
    I find this annoying, as it's all too easy to override something by accident with the customize functionality, then your emacs init doesn't work. You can't get rid of it completely, but you can point it at a random file every time.

#+begin_src emacs-lisp
  (setq custom-file (make-temp-file ""))
  (setq custom-safe-themes t)
#+end_src

** Disable backup files
    I've never found emacs backup files to be particularly useful
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
#+end_src

** UTF-8 all the things!
    utf-8 should be the default for everything.

#+begin_src emacs-lisp
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src

** Unbind the pesky sleep key
#+begin_src emacs-lisp
  (global-unset-key [(control z)])
  (global-unset-key [(control x)(control z)])
#+end_src

** Use 'y' or 'n' instead of 'yes' or 'no'
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** A function to set the framesize for streaming
 Sometimes I want to show emacs via OBS Studio, which I have set to 1280x720p. A frame size of 109x31 fits perfectly for me. Here's a function I can call to switch to toggle between that frame size and my normal one, when I need it.
 #+begin_src emacs-lisp
   (defvar gp/frame-normal-width 110)
   (defvar gp/frame-normal-height 58)
   (defvar gp/frame-streaming-width 109)
   (defvar gp/frame-streaming-height 31)
   (defvar gp/is-streaming-size nil)

   (defun gp/frame-size-streaming ()
     "Sets the frame size so it's suitable for streaming via OBS at 720p"
     (interactive)
     (set-frame-width (selected-frame) gp/frame-streaming-width)
     (set-frame-height (selected-frame) gp/frame-streaming-height)
     (setq gp/is-streaming-size t))

   (defun gp/frame-size-normal ()
     "Sets the frame size to my default values"
     (interactive)
     (set-frame-width (selected-frame) gp/frame-normal-width)
     (set-frame-height (selected-frame) gp/frame-normal-height)
     (setq gp/is-streaming-size nil))

   (defun gp/streaming-toggle ()
     "Toggles between streaming and normal frame sizes"
     (interactive)
     (if (eq gp/is-streaming-size nil)
       (gp/frame-size-streaming)
     ; else
     (gp/frame-size-normal)))

   (gp/frame-size-normal)
 #+end_src

 * Enable recentf mode ([[https://www.emacswiki.org/emacs/RecentFiles][recent-files]])
Recentf is useful to re-open a file you worked on recently, but it's good to set some limits on it. Also, ignore any package files from elpa, as they make it less than useful.
#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 50)
  (setq recentf-max-saved-items 250)
  ;; (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  (add-to-list 'recentf-exclude "\\elpa")
#+end_src

I've replaced the recentf-open-files keybinding with counsel-recentf instead.

** Enable overwriting selected text
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

** Disable audible bell, use visual instead
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq visible-bell t)
#+end_src

** Show trailing white space
   Show white space at the ends of line, to avoid embarassment when comitting something. Then delete them with M-x delete-trailing-whitespace
  #+begin_src emacs-lisp
    (setq-default show-trailing-whitespace t)
  #+end_src

   actually, just delete them automatically when we save.
  #+begin_src emacs-lisp
    (add-hook 'before-save-hook #'delete-trailing-whitespace)
  #+end_src

   Show whitespace also applies to the minibuffer by default, which rather spoils ivy and counsel output. Let's disable that behaviour:
  #+begin_src emacs-lisp
    (add-hook 'minibuffer-setup-hook
	      (lambda () (setq-local show-trailing-whitespace nil)))
  #+end_src

   Also, it applies to ansi-term as well, which just looks weird. So I'll turn it off there too.
  #+begin_src emacs-lisp
    (add-hook 'term-mode-hook
	      (lambda () (setq show-trailing-whitespace nil)))
  #+end_src

** Highlight current line
This is useful in many situations, so enable it for programming and
text editing based modes.
#+begin_src emacs-lisp
  (require 'hl-line)
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
#+end_src

** Undo Tree
Emacs has a powerful, but confusing, undo model. Undo tree makes it easier to use and lets you get back pretty much anything you've done.
#+begin_src emacs-lisp
(use-package undo-tree
  :diminish
  :bind (("C-c _" . undo-tree-visualize))
  :config
  (global-undo-tree-mode +1)
  (unbind-key "M-_" undo-tree-map))
#+end_src

** Theme
I like a dark editor, and base16-brewer is what I've got used previously. But now I'm trying a vscode dark theme.
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))
  (load-theme 'vscode-dark-plus t)
  ;; Remove the border around the TODO word on org-mode files
  (setq vscode-dark-plus-box-org-todo nil)

  ;; Do not set different heights for some org faces
  (setq vscode-dark-plus-scale-org-faces nil)
#+end_src

*** Mode line
    I'm using doom-modeline as it looks nice and is pretty customisable. It depends on =all-the-icons= so you need to run =M-x all-the-icons-install-fonts= to make sure the fonts are installed.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :custom
    (column-number-mode t)
    :init (doom-modeline-mode 1))
#+end_src

** Fonts
A matter of personal opinion, but a modern mono-spaced font makes emacs look a lot better. I'm currently trying [[https://github.com/microsoft/cascadia-code][Cascadia Code]], which can be installed on debian with =sudo apt install fonts-cascadia-code=.

I'm setting Roboto Light for the variable pitch font and Fira Code for fixed-pitch (i.e. monospace)

#+begin_src emacs-lisp
  ;; (defvar gp/fixed-width-font "Cascadia Code 14")
  (defvar gp/fixed-width-font "Fira Code 13")
  (defvar gp/variable-width-font "Roboto Light 15")

  (set-face-attribute 'default nil :font gp/fixed-width-font)
  (set-face-attribute 'fixed-pitch nil :font gp/fixed-width-font)
  (set-face-attribute 'variable-pitch nil :font gp/variable-width-font)

  (dolist (face '(default fixed-pitch))
    (set-face-attribute `,face nil :font gp/fixed-width-font))

  ;;(add-to-list 'default-frame-alist '(font . "Roboto Mono Light 14"))
  ;;(set-fontset-font "fontset-default"  '(#x2600 . #x26ff) "Fira Code 16")
  (setq-default line-spacing 0)
  (setq x-underline-at-descent-line t)
#+end_src

** Which key
   [[https://github.com/justbur/emacs-which-key][Which-key]] enables discoverability of available commands.

   If you ever want to just explore the available keybindings, then try =M-x which-key-show-top-level= or =M-x which-key-show-major-mode=

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode 1)
    (which-key-setup-side-window-bottom))
#+end_src

* Org Mode
#+begin_src emacs-lisp
  (use-package org
    :pin org ;; use version from orgmode.org/elpa instead of gnu.
    :hook ((org-mode . visual-line-mode)
	   (org-mode . variable-pitch-mode)) ;; enable a mix of proportional and fixed width fonts.
    :custom
    (org-src-tab-acts-natively t)
    (org-src-fontify-natively t) ;; native src block fontification
    (org-src-window-setup 'current-window) ;; edit src blocks in place, rather than a new window
    (org-hide-emphasis-markers t) ;;actually emphasise text (e.g. show as italic instead of /italic/)
    )

  (use-package org-plus-contrib
    :pin org
    :after org)
#+end_src

Let's make org-mode have dyanmic wrapping, and center it in the frame so that it works a bit more like a typical word processor.

For this, I make use of [[https://elpa.gnu.org/packages/adaptive-wrap.html][adaptive-wrap]], [[https://www.emacswiki.org/emacs/VisualLineMode][visual-line-mode]], [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] and [[https://github.com/mpwang/perfect-margin][perfect-margin]], then text behaves as if you'd used M-q but without actually adding line breaks to the source text.
#+begin_src emacs-lisp
  (use-package adaptive-wrap
    :diminish adaptive-wrap-prefix-mode
    :hook (org-mode . adaptive-wrap-prefix-mode))

  (use-package visual-fill-column
    :diminish
    :hook (visual-line-mode . visual-fill-column-mode)
    :custom
    (visual-fill-column-width 80))

  ;; centre the org-mode area in the frame.
  (use-package perfect-margin
    :diminish
    :hook (org-mode . perfect-margin-mode)
    :custom
    (perfect-margin-visible-width 80)
    :init
    (defcustom perfect-margin-ignore-regexps
      '("^minibuf" "^[*]" "^magit" "^COMMIT_")
      "List of strings to determine if window is ignored.
  Each string is used as regular expression to match the window buffer name."
      :group 'perfect-margin)

    (defcustom perfect-margin-ignore-filters
      '(window-minibuffer-p)
      "List of functions to determine if window is ignored.
  Each function is called with window as its sole arguemnt, returning a non-nil value indicate to ignore the window."
      :group 'perfect-margin)
    )
#+end_src

To make org mode look a bit nicer, I like to use the org-bullets package to replace headline markers with Unicode bullets.
#+begin_src emacs-lisp
  (use-package org-bullets
    :diminish
    :hook (org-mode . org-bullets-mode))
#+end_src

In order for variable-pitch-mode to work properly, I need to set fixed pitch fonts for various org faces:

#+begin_src emacs-lisp
  (custom-theme-set-faces
     'user
     '(org-block ((t (:inherit fixed-pitch))))
     '(org-code ((t (:inherit (shadow fixed-pitch)))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-table ((t (:inherit fixed-pitch))))
     '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

** Toc-org
 Install the =toc-org= package after org mode is loaded. This enables
 automatic generation of up to date tables of contents.

 #+begin_src emacs-lisp
   (use-package toc-org
     :diminish
     :ensure t
     :after org
     :hook (org-mode . toc-org-mode))

 #+end_src
** Org Roam
I'm not using org roam at the moment so this config is disabled.

I didn't get the chance to use it properly so there's no point leaving
it hanging around.

+I'm going to try using [[https://www.orgroam.com/][org roam]] to manage my note-taking. It's based+
+around the [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten]] technique, which is similar to how I've made+
+notes in the past, only more organised ;-)+

+org-roam requires sqlite3 to be installed, so if it isn't, run this:+
#+begin_src sh :tangle no
sudo apt install sqlite3
#+end_src

#+begin_src emacs-lisp :tangle no
  ;; (use-package org-roam
  ;;   :init (setq org-roam-directory "~/Documents/Dropbox/org-roam")
  ;;   :after org
  ;;   :hook (org-mode . org-roam-mode)
  ;;   :commands (org-roam-buffer-toggle-display
  ;; 	     org-roam-find-file
  ;; 	     org-roam-graph))
#+end_src

I'm telling org roam where to store my notes (my dropbox folder so
they get synched between machines).

* Markdown
Sometimes I need to edit markdown, so here's how to configure [[https://github.com/jrblevin/markdown-mode][markdown-mode]].
For README.md files, use github flavoured markdown, otherwise use normal markdown mode.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode)))
#+end_src

* Completion Framework

** Ivy
   I'm going to give Ivy a go (along with Swiper/Counsel) to see if I like it, instead of Helm.

 #+begin_src emacs-lisp
   (use-package ivy
     :diminish ivy-mode
     :custom
     (ivy-height 30)
     (ivy-use-virtual-buffers t)
     (ivy-use-selectable-prompt t)
     (ivy-count-format "(%d/%d) ")
     :config
     (ivy-mode 1))
 #+end_src

  I'll start with a minimal config - just setting the options recommended in the getting started section of the documentation.

** Counsel
   Similarly, for Counsel, I'll just enable counsel-mode to default to using counsel.
#+begin_src emacs-lisp
  (use-package counsel
    :diminish counsel-mode
    :bind (("C-x C-r" . counsel-recentf))
    :config
    (counsel-mode 1))

  (use-package counsel-projectile)
#+end_src

** Ivy-Rich
   Ivy-rich enables prettifying the ivy output
#+begin_src emacs-lisp
  (use-package ivy-rich
    :diminish ivy-rich-mode
    :hook ((ivy-mode counsel-mode) . ivy-rich-mode)
    :custom
    (ivy-virtual-abbreviate 'abbreviate)
    (ivy-rich-path-style 'abbrev)
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src

** Swiper
   And finally, swiper for searching. I bind it to C-s so that I use it instead of i-search.

   I'm now binding swiper-thing-at-point to C-s since I'm usually searching for th thing I'm looking at.
#+begin_src emacs-lisp
  (use-package swiper
    :commands (swiper swiper-all)
    :bind ("C-s" . 'swiper-thing-at-point))
#+end_src

* Git stuff
Magit is a great interface to git (although the [[https://magit.vc/manual/magit/][documentation]] is quite dense).
#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
	   ("C-x M-g" . magit-dispatch-popup)))
#+end_src
Apart from the keybindings, I don't need to make any config changes.

I like to have a visual git status in the gutter/fringe, for that I use [[https://github.com/emacsorphanage/git-gutter][git-gutter.el]]
#+begin_src emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :init
    (custom-set-variables
     '(git-gutter:update-interval 2))
    :config
    (global-git-gutter-mode +1))
#+end_src
Dimish the mode so that it doesn't clutter up our mode line/status bar.

The update-interval config is to enable live updating (every 2 seconds of idle time).

I enable it globally because I use git for many different files, not just code.

* Projectile
[[https://github.com/bbatsov/projectile][Projectile]] is handy for interacting with projects, and it can integrate with Helm or Ivy nicely.
#+begin_src emacs-lisp
  (use-package projectile
    :demand
    :bind (:map projectile-mode-map
	      ("C-c p" . projectile-command-map))
    :init
    (setq projectile-completion-system 'ivy)
    (setq projectile-enable-caching t)
    :config
    (add-to-list 'projectile-globally-ignored-files "node-modules")
    (projectile-mode))
#+end_src

And since I'm currently using Ivy & Counsel, I'll include the [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] integration too.

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :diminish
    :demand
    :config
    (counsel-projectile-mode))
#+end_src

** TODO [[https://github.com/ericdanan/counsel-projectile#setting-counsel-projectile-org-capture-templates][counsel-projectile-org-capture]]

* Code/Text Completion (company-mode)
Got to have those sweet code-completion popups, courtesy of [[https://company-mode.github.io/][company-mode]].
#+begin_src emacs-lisp
  (use-package company
    :diminish
    :bind (("C-." . #'company-complete))
    :custom
    (company-dabbrev-downcase nil "Don't downcase returned candidates.")
    (company-show-numbers t "Numbers are helpful.")
    (company-tooltip-limit 20 "The more the merrier.")
    (company-tooltip-idle-delay 0.4 "Faster!")
    (company-async-timeout 20 "Some requests can take a long time. That's fine.")
    :config
    ;; Use the numbers 0-9 to select company completion candidates
    (let ((map company-active-map))
      (mapc (lambda (x) (define-key map (format "%d" x)
			  `(lambda () (interactive) (company-complete-number ,x))))
	    (number-sequence 0 9)))
    :init
    (setq company-tooltip-minimum-width 10)
    (global-company-mode))
#+end_src
I've had issues with company popups being ragged when I'm using a proportional font. So I'm using [[https://github.com/tumashu/company-posframe/][company-posframe]] to enable child frames instead.
#+begin_src emacs-lisp
  (use-package company-posframe
    :init
    (company-posframe-mode 1))
#+end_src

* Parentheses
I find it invaluable to have parentheses matching enabled.
#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src
And I like the visual delimitation of colour. Rainbow-delimiters adds that.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :diminish
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Line numbers
I want line numbers on all code editing buffers. Since they should all
derive from prog-mode, I'll set line numbers there and hope for the
best. The alternative is to enable global line numbers then turn it
off in other modes, but that seems messier to me.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

* Development languages
  I'm going to try lsp-mode again, for languages it supports.

  Emacs 27 with lsp-mode is super fast and really good to use.

  Here's the core lsp-configuration:
#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook (
	   ;; bind lsp to the development modes I'm interested in.
	   (web-mode . lsp-deferred)
	   (yaml-mode . lsp-deferred)
	   (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-keymap-prefix "C-l")
    (setq lsp-enable-completion-at-point t)
    (setq lsp-enable-indentation t)
    (setq lsp-enable-on-type-formatting t)
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    :commands lsp lsp-deferred)

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+end_src
I've changed the default prefix from "s-l" to "C-l".

According to the [[https://emacs-lsp.github.io/lsp-mode/page/performance/][lsp-mode documentation]], a few things should be tweaked for maximum performance.

The default setting is too low for lsp-mode's needs due to the fact that client/server communication generates a lot of memory/garbage. I've taken the easy approach of just setting this to 100mb in the lsp-mode init section above.
#+begin_src emacs-lisp :tangle no
(setq gc-cons-threshold 100000000)
#+end_src

Similarly the the amount of data which Emacs reads from the process needs increasing. The emacs default (4k) is too low considering that some of the language server responses are in 800k - 3M range.

#+begin_src emacs-lisp :tangle no
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

Turn on ivy integration for lsp:
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :after (ivy lsp-mode))
#+end_src

** Treemacs

   Sometimes I want an IDE style tree view, so lets enable treemacs and lsp-treemacs
#+begin_src emacs-lisp
    (use-package lsp-treemacs
      :after (treemacs lsp-mode))
#+end_src

Treemacs provides a very configurable tree-view. I'm going to see how I get on with it, so I've just grabbed a basic config from the [[https://github.com/Alexander-Miller/treemacs][treemacs documentation]].

C-x t t should toggle the treeview, and I'll see how I get on with that.

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+end_src

And since we're also using projectile, let's enable treemacs integration
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)
#+end_src

** Javascript/web development (lsp?)
   There are several ways to configure javascript & typescript support. I'm going with web-mode since it can handle template-based development (react, vue etc.) along with raw js & ts files.

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.js\\'" . web-mode)
	   ("\\.jsx\\'" . web-mode)
	   ("\\.ts\\'" . web-mode)
	   ("\\.tsx\\'" . web-mode)
	   ("\\.html\\'" . web-mode)
	   ("\\.vue\\'" . web-mode)
	   ("\\.json\\'" . web-mode))
    :commands web-mode
    :config
    (setq company-tooltip-align-annotations t)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-part-face t)
    (setq web-mode-content-types-alist
	  '(("jsx" . "\\.js[x]?\\'")))
    )
#+end_src

You will need to install the [[https://github.com/sourcegraph/javascript-typescript-langserver][javascript-typescript-langserver]] for lsp to work with javascript.
#+begin_src sh :tangle no
npm i -g javascript-typescript-langserver
#+end_src

Alternatively, this could be installed as a docker container, and then you could avoid installing npm/node on your local machine. I'll have to give that another go sometime.

* Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode ("\\.ya?ml\\'" . yaml-mode))
#+end_src
