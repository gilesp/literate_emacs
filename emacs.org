#+TITLE: Emacs Literate Configuration
#+AUTHOR: Giles Paterson
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
  - [[#package-management][Package Management]]
    - [[#sources][Sources]]
    - [[#use-package][Use-Package]]
  - [[#editor-configuration][Editor Configuration]]
    - [[#fix-defaults][Fix defaults]]
    - [[#keep-changes-from-customize-in-a-separate-file][Keep changes from 'customize' in a separate file]]
    - [[#disable-backup-files][Disable backup files]]
    - [[#utf-8-all-the-things][UTF-8 all the things!]]
    - [[#a-function-to-set-the-framesize-for-streaming][A function to set the framesize for streaming]]
    - [[#set-initial-window-frame-size][Set initial window (frame) size]]
    - [[#unbind-the-pesky-sleep-key][Unbind the pesky sleep key]]
    - [[#use-y-or-n-instead-of-yes-or-no][Use 'y' or 'n' instead of 'yes' or 'no']]
    - [[#enable-recentf-mode-recent-files][Enable recentf mode (recent-files)]]
    - [[#enable-overwriting-selected-text][Enable overwriting selected text]]
    - [[#disable-audible-bell-use-visual-instead][Disable audible bell, use visual instead]]
    - [[#remove-toolbar][Remove toolbar]]
    - [[#column-numbering-in-mode-line][Column numbering in mode line]]
    - [[#show-trailing-white-space][Show trailing white space]]
    - [[#highlight-current-line][Highlight current line]]
    - [[#diminish][Diminish]]
    - [[#undo-tree][Undo Tree]]
    - [[#theme][Theme]]
    - [[#fonts][Fonts]]
  - [[#convenience-enhancements][Convenience Enhancements]]
    - [[#which-key][Which key]]
  - [[#org-mode][Org Mode]]
    - [[#toc-org][Toc-org]]
  - [[#org-roam][Org Roam]]
  - [[#markdown][Markdown]]
  - [[#git-stuff][Git stuff]]
  - [[#completion-framework][Completion Framework]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#ivy-rich][Ivy-Rich]]
    - [[#swiper][Swiper]]
  - [[#projectile][Projectile]]
    - [[#counsel-projectile-org-capture][counsel-projectile-org-capture]]
  - [[#codetext-completion-company-mode][Code/Text Completion (company-mode)]]
  - [[#line-numbers][Line numbers]]
  - [[#development-languages][Development languages]]
  - [[#treemacs][Treemacs]]
  - [[#javascriptweb-development-lsp][Javascript/web development (lsp?)]]
  - [[#org-mode-live-preview][Org mode live preview?]]

** About this file
This configuration is inspired by [[https://github.com/vidjuheffex/dotemacs][vidjuheffex's config]] and [[https://github.com/gilbertw1/emacs-literate-starter][gilbertw1's
config]]. I've also taken inspiration from
https://blog.sumtypeofway.com/posts/emacs-config.html.

This is a literate configuration, meaning that it's an org file with
embedded code blocks that form the configuration for emacs. Having the
code blocks in an org file allows me to document everything with the
code it relates to.

*** Automatically Tangle
First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in
this file when generating the code for the config, unless the code
block explicitly includes =:tangle no= as the above code block does.

*** Visibility Settings
Next we have a property defined on the [[Configuration][Configuration]] heading that
defines the visibility that tells org to show it's direct children on
startup. This way a clean outline of all sub headings under
Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag:
=:TOC_3_gh:=. This tells an org-mode package =toc-org= to generate a
table of contents under this heading that has a max depth of 3 and is
created using Github-style hrefs. This table of contents is updated
everytime the file is saved and makes for a functional table of
contents that works properly directly on github.

** Personal Information
This is me

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Giles Paterson"
      user-mail-address "giles@vurt.uk")
#+END_SRC

** Package Management
*** Sources

Initially I defined the package sources here, but because we use org
in the init.el, the built-in org version would always get used, rather
than the version from orgmode.org. This caused issues with
incompatible versions. To avoid that, all the package archive
configuration has been moved to [[./init.el]]

*** Use-Package

I like to use [[https://github.com/jwiegley/use-package][use-package]] to keep things tidy and speedy on startup,
so this makes sure it's available. I set it to defer loading packages
unless told otherwise, this speeds up initialisation.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t
	use-package-ensure-all t
	use-package-always-defer t)
  (require 'use-package)
  (require 'use-package-ensure)
#+END_SRC

I like to make sure all my packages are up to date, so I use auto-package-update.
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :init
  (auto-package-update-maybe)
  (setq auto-package-update-delete-old-versions t))
#+END_SRC

** Editor Configuration

*** Fix defaults
Reset some emacs defaults that date from prehistoric times

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)      ;; No need for a startup screen
  (setq initial-scratch-message nil)   ;; or to tell me what the scratch buffer is
  (setq sentence-end-double-space nil) ;; Who the hell does this in 2021?
  (setq mark-even-if-inactive nil)     ;; Fix undo in command affecting the mark.
  (setq kill-whole-line t)             ;; Let C-k delete the whole line.
#+END_SRC

*** Keep changes from 'customize' in a separate file

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "customize.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

*** Disable backup files
I've never found emacs backup files to be particularly useful
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
#+END_SRC

*** UTF-8 all the things!
utf-8 should be the default for everything.
#+BEGIN_SRC emacs-lisp
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC

*** A function to set the framesize for streaming
Sometimes I want to show emacs via OBS Studio, which I have set to
1280x720p. A frame size of 109x31 fits perfectly for me. Here's a
function I can call to switch to toggle between that frame size and my
normal one, when I need it.
#+BEGIN_SRC emacs-lisp
  (defvar gp/frame-normal-width 110)
  (defvar gp/frame-normal-height 58)
  (defvar gp/frame-streaming-width 109)
  (defvar gp/frame-streaming-height 31)
  (defvar gp/is-streaming-size nil)

  (defun gp/frame-size-streaming ()
    "Sets the frame size so it's suitable for streaming via OBS at 720p"
    (interactive)
    (set-frame-width (selected-frame) gp/frame-streaming-width)
    (set-frame-height (selected-frame) gp/frame-streaming-height)
    (setq gp/is-streaming-size t))

  (defun gp/frame-size-normal ()
    "Sets the frame size to my default values"
    (interactive)
    (set-frame-width (selected-frame) gp/frame-normal-width)
    (set-frame-height (selected-frame) gp/frame-normal-height)
    (setq gp/is-streaming-size nil))

  (defun gp/streaming-toggle ()
    "Toggles between streaming and normal frame sizes"
    (interactive)
    (if (eq gp/is-streaming-size nil)
      (gp/frame-size-streaming)
    ; else
    (gp/frame-size-normal)))
#+END_SRC

*** Set initial window (frame) size
Re-use the values for my normal frame width & height.
#+BEGIN_SRC emacs-lisp
  (setq initial-frame-alist
      '(
	(width . gp/frame-normal-width) ; character
	(height . gp/frame-normal-height) ; lines
	))
#+END_SRC

*** Unbind the pesky sleep key
#+BEGIN_SRC emacs-lisp
  (global-unset-key [(control z)])
  (global-unset-key [(control x)(control z)])
#+END_SRC

*** Use 'y' or 'n' instead of 'yes' or 'no'
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Enable recentf mode ([[https://www.emacswiki.org/emacs/RecentFiles][recent-files]])
Recentf is useful to re-open a file you worked on recently, but it's good to set some limits on it.
Also, ignore any package files from elpa, as they make it less than useful.
#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 50)
  (setq recentf-max-saved-items 250)
  ;; (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  (add-to-list 'recentf-exclude "\\elpa")
#+END_SRC

I've replaced the recentf-open-files keybinding with counsel-recentf instead.

*** Enable overwriting selected text
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

*** Disable audible bell, use visual instead
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq visible-bell t)
#+END_SRC

*** Remove toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** Column numbering in mode line
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC

*** Show trailing white space
Show white space at the ends of line, to avoid embarassment when
comitting something. Then delete them with M-x delete-trailing-whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC

actually, just delete them automatically when we save.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC

Show whitespace also applies to the minibuffer by default, which
rather spoils ivy and counsel output. Let's disable that behaviour:
#+BEGIN_SRC emacs-lisp
  (add-hook 'minibuffer-setup-hook
	    (lambda () (setq-local show-trailing-whitespace nil)))
#+END_SRC

Also, it applies to ansi-term as well, which just looks weird. So I'll
turn it off there too.
#+BEGIN_SRC emacs-lisp
    (add-hook 'term-mode-hook
	      (lambda () (setq show-trailing-whitespace nil)))
#+END_SRC

*** Highlight current line
This is useful in many situations, so enable it for programming and
text editing based modes.
#+BEGIN_SRC emacs-lisp
  (require 'hl-line)
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
#+END_SRC

*** Diminish
Use diminish so that use-package can hide modes from the mode line when
we ask it to.
#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

*** Undo Tree
Emacs has a powerful, but confusing, undo model. Undo tree makes it
easier to use and lets you get back pretty much anything you've done.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish
  :bind (("C-c _" . undo-tree-visualize))
  :config
  (global-undo-tree-mode +1)
  (unbind-key "M-_" undo-tree-map))
#+END_SRC

*** Theme
I like a dark editor, and base16-brewer is what I've got used to
#+BEGIN_SRC emacs-lisp
    ;; (use-package base16-theme
    ;;     :ensure t
    ;;     :config
    ;;     (load-theme 'base16-brewer t))
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))
(load-theme 'vscode-dark-plus t)
;;(load-theme 'base16-vscode-dark t)
#+END_SRC

*** Fonts
A matter of personal opinion, but a modern mono-spaced font makes
emacs look a lot better. I'm currently trying [[https://github.com/microsoft/cascadia-code][Cascadia Code]], which can
be installed on debian with =sudo apt install fonts-cascadia-code=

#+BEGIN_SRC emacs-lisp
  (ignore-errors (set-frame-font "Cascadia Code-13"))
#+END_SRC

** Convenience Enhancements

*** Which key
[[https://github.com/justbur/emacs-which-key][Which-key]] enables discoverability of available commands.

If you ever want to just explore the available keybindings, then try
=M-x which-key-show-top-level= or =M-x which-key-show-major-mode=

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode 1)
    (which-key-setup-side-window-bottom))
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org ;; use version from orgmode.org/elpa instead of gnu.
    :custom
    (org-src-tab-acts-natively t)
    (org-src-window-setup 'current-window) ;; edit src blocks in place, rather than a new window
    (org-hide-emphasis-markers t) ;;actually emphasise text (e.g. show as italic instead of /italic/)
    )

  (use-package org-plus-contrib
    :pin org
    :after org)
#+END_SRC

Here, I'm telling org mode to hide the emphasis markup (/.../ for italics, *...* for bold etc.)
*** Toc-org
Install the =toc-org= package after org mode is loaded. This enables
automatic generation of up to date tables of contents.

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :ensure t
    :after org
    :hook (org-mode . toc-org-mode))

#+END_SRC
** Org Roam
I'm not using org roam at the moment so this config is disabled.

I didn't get the chance to use it properly so there's no point leaving
it hanging around.

+I'm going to try using [[https://www.orgroam.com/][org roam]] to manage my note-taking. It's based+
+around the [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten]] technique, which is similar to how I've made+
+notes in the past, only more organised ;-)+

+org-roam requires sqlite3 to be installed, so if it isn't, run this:+
#+BEGIN_SRC sh
sudo apt install sqlite3
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-roam
    :init (setq org-roam-directory "~/Documents/Dropbox/org-roam")
    :after org
    :hook (org-mode . org-roam-mode)
    :commands (org-roam-buffer-toggle-display
	       org-roam-find-file
	       org-roam-graph))
#+END_SRC

I'm telling org roam where to store my notes (my dropbox folder so
they get synched between machines).

** Markdown
Sometimes I need to edit markdown, so here's how to configure [[https://github.com/jrblevin/markdown-mode][markdown-mode]].
For README.md files, use github flavoured markdown, otherwise use normal markdown mode.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** Git stuff
Magit is a great interface to git (although the [[https://magit.vc/manual/magit/][documentation]] is quite dense).
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
	   ("C-x M-g" . magit-dispatch-popup)))
#+END_SRC
Apart from the keybindings, I don't need to make any config changes.

I like to have a visual git status in the gutter/fringe, for that I use [[https://github.com/emacsorphanage/git-gutter][git-gutter.el]]
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :init
    (custom-set-variables
     '(git-gutter:update-interval 2))
    :config
    (global-git-gutter-mode +1))
#+END_SRC
Dimish the mode so that it doesn't clutter up our mode line/status bar.

The update-intervalk config is to enable live updating (every 2 seconds of idle time).

I enable it globally because I use git for many different files, not just code.

** Completion Framework

*** Ivy
I'm going to give Ivy a go (along with Swiper/Counsel) to see if I like it, instead of Helm.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :custom
    (ivy-height 30)
    (ivy-use-virtual-buffers t)
    (ivy-use-selectable-prompt t)
    (ivy-count-format "(%d/%d) ")
    :config
    (ivy-mode 1))
#+END_SRC

I'll start with a minimal config - just setting the options recommended int the getting started section of the documentation.

*** Counsel
Similarly, for Counsel, I'll just enable counsel-mode to default to using counsel.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :diminish counsel-mode
    :bind (("C-x C-r" . counsel-recentf))
    :config
    (counsel-mode 1))

  (use-package counsel-projectile)
#+END_SRC

*** Ivy-Rich
Ivy-rich enables prettifying the ivy output
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :hook ((ivy-mode counsel-mode) . ivy-rich-mode)
    :custom
    (ivy-virtual-abbreviate 'abbreviate)
    (ivy-rich-path-style 'abbrev)
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+END_SRC

*** Swiper
And finally, swiper for searching. I bind it to C-s so that I use it instead of i-search.

I'm now binding swiper-thing-at-point to C-s since I'm usually
searching for th thing I'm looking at.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper swiper-all)
    :bind ("C-s" . 'swiper-thing-at-point))
#+END_SRC

** Projectile
[[https://github.com/bbatsov/projectile][Projectile]] is handy for interacting with projects, and it can integrate with Helm or Ivy nicely.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand
    :bind (:map projectile-mode-map
	      ("C-c p" . projectile-command-map))
    :init
    (setq projectile-completion-system 'ivy)
    (setq projectile-enable-caching t)
    :config
    (add-to-list 'projectile-globally-ignored-files "node-modules")
    (projectile-mode))
#+END_SRC

And since I'm currently using Ivy & Counsel, I'll include the [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] integration too.

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :demand
    :config
    (counsel-projectile-mode))
#+END_SRC
*** TODO [[https://github.com/ericdanan/counsel-projectile#setting-counsel-projectile-org-capture-templates][counsel-projectile-org-capture]]

** Code/Text Completion (company-mode)
Got to have those sweet code-completion popups, courtesy of [[https://company-mode.github.io/][company-mode]].
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
    :bind (("C-." . #'company-complete))
    :custom
    (company-dabbrev-downcase nil "Don't downcase returned candidates.")
    (company-show-numbers t "Numbers are helpful.")
    (company-tooltip-limit 20 "The more the merrier.")
    (company-tooltip-idle-delay 0.4 "Faster!")
    (company-async-timeout 20 "Some requests can take a long time. That's fine.")
    :config
    ;; Use the numbers 0-9 to select company completion candidates
    (let ((map company-active-map))
      (mapc (lambda (x) (define-key map (format "%d" x)
			  `(lambda () (interactive) (company-complete-number ,x))))
	    (number-sequence 0 9)))
    :init
    (global-company-mode))
#+END_SRC

** Line numbers
I want line numbers on all code editing buffers. Since they should all
derive from prog-mode, I'll set line numbers there and hope for the
best. The alternative is to enable global line numbers then turn it
off in other modes, but that seems messier to me.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Development languages
I'm going to try lsp-mode again, for languages it supports.

Emacs 27 with lsp-mode is super fast and really good to use.

Here's the core lsp-configuration:
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (
	   ;; bind lsp to the development modes I'm interested in.
	   (web-mode . lsp-deferred)
	   (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-keymap-prefix "C-l")
    (setq lsp-enable-completion-at-point t)
    (setq lsp-enable-indentation t)
    (setq lsp-enable-on-type-formatting t)
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    :commands lsp lsp-deferred)

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+END_SRC
I've changed the default prefix from "s-l" to "C-l".

According to the [[https://emacs-lsp.github.io/lsp-mode/page/performance/][lsp-mode documentation]], a few things should be
tweaked for maximum performance.

The default setting is too low for lsp-mode's needs due to the fact
that client/server communication generates a lot of
memory/garbage. I've taken the easy approach of just setting this to
100mb in the lsp-mode init section above.
#+BEGIN_SRC emacs-lisp :tangle no
(setq gc-cons-threshold 100000000)
#+END_SRC

Similarly the the amount of data which Emacs reads from the process
needs increasing. The emacs default (4k) is too low considering that
some of the language server responses are in 800k - 3M range.

#+BEGIN_SRC emacs-lisp :tangle no
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC

Turn on ivy integration for lsp:
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ivy
    :after (ivy lsp-mode))
#+END_SRC

And also turn on company mode integration
#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :custom (company-lsp-enable-snippet t)
    :after (company lsp-mode))
#+END_SRC

Sometimes I want an IDE style tree view, so lets enable treemacs and lsp-treemacs
#+BEGIN_SRC emacs-lisp
    (use-package lsp-treemacs
      :after (treemacs lsp-mode))
#+END_SRC

** Treemacs
Treemacs provides a very configurable tree-view. I'm going to see how
I get on with it, so I've just grabbed a basic config from the
[[https://github.com/Alexander-Miller/treemacs][treemacs documentation]].

C-x t t should toggle the treeview, and I'll see how I get on with that.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC

And since we're also using projectile, let's enable treemacs integration
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)
#+END_SRC

** Javascript/web development (lsp?)
There are several ways to configure javascript & typescript
support. I'm going with web-mode since it can handle template-based
development (react, vue etc.) along with raw js & ts files.

#+BEGIN_SRC emacs-lisp
  ;; (use-package tide
  ;;   :hook (
  ;;        (web-mode . setup-tide-mode)
  ;; 	 )
  ;;   :config
  ;;   (defun setup-tide-mode ()
  ;;     (interactive)
  ;;     (tide-setup)
  ;;     (eldoc-mode +1)
  ;;     (company-mode +1)
  ;;     (local-set-key [f1] 'tide-documentation-at-point))
  ;;   (setq company-tooltip-align-annotations t)
  ;;   (setq tide-sort-completions-by-kind t)
  ;; )
  (use-package web-mode
    :ensure t
    :mode (("\\.js\\'" . web-mode)
	   ("\\.jsx\\'" . web-mode)
	   ("\\.ts\\'" . web-mode)
	   ("\\.tsx\\'" . web-mode)
	   ("\\.html\\'" . web-mode)
	   ("\\.vue\\'" . web-mode)
	   ("\\.json\\'" . web-mode))
    :commands web-mode
    :config
    (setq company-tooltip-align-annotations t)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-part-face t)
    (setq web-mode-content-types-alist
	  '(("jsx" . "\\.js[x]?\\'")))
    )
#+END_SRC

You will need to install the [[https://github.com/sourcegraph/javascript-typescript-langserver][javascript-typescript-langserver]] for lsp
to work with javascript.
#+BEGIN_SRC sh
npm i -g javascript-typescript-langserver
#+END_SRC

Alternatively, this could be installed as a docker container, and then
you could avoid installing npm/node on your local machine. I'll have
to give that another go sometime.

** TODO Org mode live preview?
