#+TITLE: Emacs Literate Configuration
#+AUTHOR: Giles Paterson
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
  - [[#package-management][Package Management]]
    - [[#sources][Sources]]
    - [[#use-package][Use-Package]]
  - [[#editor-configuration][Editor Configuration]]
    - [[#keep-changes-from-customize-in-a-separate-file][Keep changes from 'customize' in a separate file]]
    - [[#save-all-backups-in-one-place][Save all backups in one place]]
    - [[#get-rid-of-the-startup-screen][Get rid of the startup screen]]
    - [[#unbind-the-pesky-sleep-key][Unbind the pesky sleep key]]
    - [[#use-y-or-n-instead-of-yes-or-no][Use 'y' or 'n' instead of 'yes' or 'no']]
    - [[#enable-recentf-mode-recent-files][Enable recentf mode (recent-files)]]
    - [[#enable-overwriting-selected-text][Enable overwriting selected text]]
    - [[#disable-audible-bell-use-visual-instead][Disable audible bell, use visual instead]]
    - [[#remove-toolbar][Remove toolbar]]
    - [[#column-numbering-in-mode-line][Column numbering in mode line]]
    - [[#show-trailing-white-space][Show trailing white space]]
    - [[#diminish][Diminish]]
    - [[#theme][Theme]]
  - [[#org-mode][Org Mode]]
    - [[#toc-org][Toc-org]]
  - [[#markdown][Markdown]]
  - [[#git-stuff][Git stuff]]
  - [[#completion-framework][Completion Framework]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
  - [[#projectile][Projectile]]
    - [[#counsel-projectile-org-capture][counsel-projectile-org-capture]]
  - [[#codetext-completion-company-mode][Code/Text Completion (company-mode)]]
  - [[#development-languages][Development languages]]
  - [[#line-numbers][Line numbers]]
  - [[#javascriptweb-development-lsp][Javascript/web development (lsp?)]]
  - [[#org-mode-live-preview][Org mode live preview?]]

** About this file
This configuration is inspired by [[https://github.com/vidjuheffex/dotemacs][vidjuheffex's config]] and [[https://github.com/gilbertw1/emacs-literate-starter][gilbertw1's
config]].

This is a literate configuration, meaning that it's an org file with
embedded code blocks that form the configuration for emacs. Having the
code blocks in an org file allows me to document everything with the
code it relates to.

*** Automatically Tangle
First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in
this file when generating the code for the config, unless the code
block explicitly includes =:tangle no= as the above code block does.


*** Visibility Settings
Next we have a property defined on the [[Configuration][Configuration]] heading that
defines the visibility that tells org to show it's direct children on
startup. This way a clean outline of all sub headings under
Configuration is shown each time this file is opened in org-mode.



*** Table of Contents
Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag:
=:TOC_3_gh:=. This tells an org-mode package =toc-org= to generate a
table of contents under this heading that has a max depth of 3 and is
created using Github-style hrefs. This table of contents is updated
everytime the file is saved and makes for a functional table of
contents that works properly directly on github.

** Personal Information
This is me

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Giles Paterson"
      user-mail-address "giles@vurt.uk")
#+END_SRC

** Package Management
*** Sources

Before doing anything else, I need to configure [[melpa.org][melpa] as
a source for packages.

**** Melpa config
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

*** Use-Package

I like to use [[https://github.com/jwiegley/use-package][use-package]] to keep things tidy and speedy on startup,
so this makes sure it's available. I set it to defer loading packages
unless told otherwise, this speeds up initialisation.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t
	use-package-ensure-all t
	use-package-always-defer t)
  (require 'use-package)
  (require 'use-package-ensure)
#+END_SRC

** Editor Configuration
*** Keep changes from 'customize' in a separate file

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "customize.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

*** Save all backups in one place

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
    `(("." . ,(concat user-emacs-directory "backups"))))
#+END_SRC

*** Get rid of the startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

*** Unbind the pesky sleep key 
#+BEGIN_SRC emacs-lisp
  (global-unset-key [(control z)])
  (global-unset-key [(control x)(control z)])
#+END_SRC

*** Use 'y' or 'n' instead of 'yes' or 'no'
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Enable recentf mode ([[https://www.emacswiki.org/emacs/RecentFiles][recent-files]])
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 50)
  (setq recentf-max-saved-items 250)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC

*** Enable overwriting selected text
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

*** Disable audible bell, use visual instead
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq visible-bell t)
#+END_SRC

*** Remove toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** Column numbering in mode line
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC

*** Show trailing white space 
Show white space at the ends of line, to avoid embarassment when
comitting something. Then delete them with M-x delete-trailing-whitespace
#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
#+END_SRC

*** Diminish
Use diminish so that use-package can hid modes from the mode line when
we ask it to.
#+BEGIN_SRC emacs-lisp
(use-package diminish)
#+END_SRC

*** Theme
I like a dark editor, and base16-brewer is what I've got used to
#+BEGIN_SRC emacs-lisp
    ;; (use-package base16-theme
    ;;     :ensure t
    ;;     :config
    ;;     (load-theme 'base16-brewer t))
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))
(load-theme 'vscode-dark-plus t)
;;(load-theme 'base16-vscode-dark t)
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (setq org-src-tab-acts-natively t))
#+END_SRC

*** Toc-org
Install the =toc-org= package after org mode is loaded. This enables
automatic generation of up to date tables of contents.

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :ensure t
    :after org
    :hook (org-mode . toc-org-enable))

#+END_SRC

** Markdown
Sometimes I need to edit markdown, so here's how to configure [[https://github.com/jrblevin/markdown-mode][markdown-mode]].
For README.md files, use github flavoured markdown, otherwise use normal markdown mode.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** Git stuff
Magit is a great interface to git (although the [[https://magit.vc/manual/magit/][documentation]] is quite dense).
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
	   ("C-x M-g" . magit-dispatch-popup)))
#+END_SRC
Apart from the keybindings, I don't need to make any config changes.

I like to have a visual git status in the gutter/fringe, for that I use [[https://github.com/emacsorphanage/git-gutter][git-gutter.el]]
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :diminish git-gutter-mode
    :init
    (custom-set-variables
     '(git-gutter:update-interval 2))
    :config
    (global-git-gutter-mode +1))
#+END_SRC
Dimish the mode so that it doesn't clutter up our mode line/status bar.

The update-intervalk config is to enable live updating (every 2 seconds of idle time).

I enable it globally because I use git for many different files, not just code.

** Completion Framework

*** Ivy
I'm going to give Ivy a go (along with Swiper/Counsel) to see if I like it, instead of Helm.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    ;; add 'recent-mode' and bookmarks to 'ivy-switch-buffer'.
    (setq ivy-use-virtual-buffers t)
    ;; number of result lines to display
    ;;(setq ivy-height 10)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-display-style 'fancy))
#+END_SRC

I'll start with a minimal config - just setting the options recommended int he getting started section of the documentation.

*** Counsel
Similarly, for Counsel, I'll just enable counsel-mode to default to using counsel.
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile)
  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode 1))
#+END_SRC

*** Swiper
And finally, swiper for searching. I bind it to C-s so that I use it instead of i-search.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper swiper-all)
    :bind ("C-s" . 'swiper))
#+END_SRC

** Projectile
[[https://github.com/bbatsov/projectile][Projectile]] is handy for interacting with projects, and it can integrate with Helm or Ivy nicely.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand
    :bind (:map projectile-mode-map
	      ("C-c p" . projectile-command-map))
    :init
    (setq projectile-completion-system 'ivy)
    (setq projectile-enable-caching t)
    :config
    (add-to-list 'projectile-globally-ignored-files "node-modules")
    (projectile-mode))
#+END_SRC

And since I'm currently using Ivy & Counsel, I'll include the [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] integration too.

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :demand
    :config
    (counsel-projectile-mode))
#+END_SRC
*** TODO [[https://github.com/ericdanan/counsel-projectile#setting-counsel-projectile-org-capture-templates][counsel-projectile-org-capture]]
** Code/Text Completion (company-mode)
Got to have those sweet code-completion popups, courtesy of [[https://company-mode.github.io/][company-mode]].
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
    :init
    (global-company-mode))
#+END_SRC

** Development languages
I'm going to try lsp-mode again, for languages it supports.
Here's the core lsp-configuration:
#+BEGIN_SRC emacs-lisp
  (setq lsp-keymap-prefix "C-l")

  (use-package lsp-mode
    :hook (
	   ;; bind lsp to the development modes I'm interested in.
	   (web-mode . lsp-deferred)
	   (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-enable-completion-at-point t)
    (setq lsp-enable-indentation t)
    (setq lsp-enable-on-type-formatting t)
    :commands lsp lsp-deferred)

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
I've changed the default prefix from "s-l" to "C-l".

** Line numbers
I want line numbers on all code editing buffers. Since they should all
derive from prog-mode, I'll set line numbers there and hope for the
best. The alternative is to enable global line numbers then turn it
off in other modes, but that seems messier to me.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Javascript/web development (lsp?)
There are several ways to configure javascript & typescript
support. I'm going with web-mode since it can handle template-based
development (react, vue etc.) along with raw js & ts files.

#+BEGIN_SRC emacs-lisp
(use-package web-mode  :ensure t
  :mode (("\\.js\\'" . web-mode)
         ("\\.jsx\\'" . web-mode)
         ("\\.ts\\'" . web-mode)
         ("\\.tsx\\'" . web-mode)
         ("\\.html\\'" . web-mode)
         ("\\.vue\\'" . web-mode)
	 ("\\.json\\'" . web-mode))
  :commands web-mode
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-enable-part-face t)
  (setq web-mode-content-types-alist
	'(("jsx" . "\\.js[x]?\\'")))
  )
#+END_SRC

You will need to install the [[https://github.com/sourcegraph/javascript-typescript-langserver][javascript-typescript-langserver]] for lsp
to work with javascript.
#+BEGIN_SRC sh
npm i -g javascript-typescript-langserver
#+END_SRC

Alternatively, this could be installed as a docker container, and then
you could avoid installing npm/node on your local machine. I'll have
to give that another go sometime.

** TODO Org mode live preview?

